import streamlit as st
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import pandas as pd
import time
import re

# Function to get all colleges based on stream and city
def get_all_colleges(stream, city):
    # Set up Selenium WebDriver
    driver_path = './chromedriver.exe'  # Replace with the path to your ChromeDriver executable
    service = Service(driver_path)
    options = Options()
    options.headless = True  # Run in headless mode for better performance
    driver = webdriver.Chrome(service=service, options=options)

    # Base URL for the search
    base_url = f"https://www.collegedunia.com/{stream}/{city}-colleges"
    driver.get(base_url)

    colleges = []

    try:
        # Scroll down to load all colleges (if the page uses lazy loading)
        last_height = driver.execute_script("return document.body.scrollHeight")
        while True:
            # Scroll down to the bottom of the page
            driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
            time.sleep(2)  # Wait for new content to load

            # Calculate new scroll height and compare with the last scroll height
            new_height = driver.execute_script("return document.body.scrollHeight")
            if new_height == last_height:
                break  # Exit the loop if no new content is loaded
            last_height = new_height

        # Wait for the college names to load
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.XPATH, "//a[@class='jsx-3230181281 college_name underline-on-hover']/h3"))
        )

        # Scrape college names, cities, and emails
        college_elements = driver.find_elements(By.XPATH, "//a[@class='jsx-3230181281 college_name underline-on-hover']")
        city_elements = driver.find_elements(By.XPATH, "//span[@class='jsx-3230181281 pr-1 location']")
        email_elements = driver.find_elements(By.XPATH, "//a[contains(@href, 'mailto:')]")

        for i in range(len(college_elements)):
            college_name = college_elements[i].find_element(By.XPATH, ".//h3").text.strip()
            city_name = city_elements[i].text.strip() if i < len(city_elements) else "N/A"
            email = email_elements[i].text.strip() if i < len(email_elements) else "N/A"

            # Append college data to the list
            colleges.append((college_name, city_name, email))

    except Exception as e:
        print(f"An error occurred: {e}")

    finally:
        # Close the WebDriver session
        driver.quit()

    return colleges


# Streamlit App main function
def main():
    st.title("College Email Scraper")

    # Ask the user for the stream and city
    stream = st.text_input("Enter the stream (e.g., MBBS, Engineering, Law):").strip().lower()
    city = st.text_input("Enter the city (e.g., Delhi, Bangalore, Mumbai):").strip().lower()

    if st.button("Get Colleges with Emails"):
        if stream and city:
            # Get all colleges for the stream and city
            st.write("Fetching college data...")
            colleges = get_all_colleges(stream, city)

            if colleges:
                # Convert the list of tuples into a DataFrame
                df = pd.DataFrame(colleges, columns=["College Name", "City", "Email"])

                # Display the results in a table
                st.write(f"Colleges for {stream} in {city}:")
                st.dataframe(df)

                # Provide download option
                csv = df.to_csv(index=False)
                st.download_button(
                    label="Download CSV",
                    data=csv,
                    file_name=f"{stream}_{city}_colleges_with_emails.csv",
                    mime="text/csv"
                )
            else:
                st.write(f"No colleges found for {stream} in {city}. Please try again later.")
        else:
            st.warning("Please enter both stream and city.")


# Run the Streamlit app
if __name__ == "__main__":
    main()